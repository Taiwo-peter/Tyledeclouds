name: CI/CD Pipeline

on:
  push:
    branches:
      - tyledecloud-server  # Trigger on pushes to the specified branch

env:
  DOCR_REGISTRY: registry.digitalocean.com
  DO_REPOSITORY: cloudy001/tyledecloud

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Authenticate with DigitalOcean Container Registry
      - name: Log in to DigitalOcean Registry
        id: login-docr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCR_REGISTRY }}
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # Step 3: Build and Push Docker Image
      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: latest
        run: |
          IMAGE_NAME="${{ env.DOCR_REGISTRY }}/${{ env.DO_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Building and pushing $IMAGE_NAME"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      # Step 4: Save Docker Registry Metadata
      - name: Save Registry Metadata
        run: echo "${{ env.DOCR_REGISTRY }}/${{ env.DO_REPOSITORY }}" > docker_registry.txt
      - name: Upload Registry Metadata
        uses: actions/upload-artifact@v3
        with:
          name: docker-registry
          path: docker_registry.txt

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      DO_DIRECTORY: ssl
      IMAGE_TAG: latest
      DO_COMPOSE: docker-compose.yml

    steps:
      # Step 1: Download Docker Registry Metadata
      - name: Download Docker Registry Metadata
        uses: actions/download-artifact@v3
        with:
          name: docker-registry
          path: .

      # Step 2: Read Docker Registry Metadata
      - name: Read Docker Registry Metadata
        run: |
          DOCR_REGISTRY=$(cat docker_registry.txt)
          echo "DOCR_REGISTRY=$DOCR_REGISTRY" >> $GITHUB_ENV

      # Step 3: Authenticate with Docker Registry
      - name: Log in to DigitalOcean Registry
        run: |
          echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login ${{ env.DOCR_REGISTRY }} -u doctl --password-stdin

      # Step 4: Add Host Key to Known Hosts
      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      # Step 5: Deploy to Ubuntu Droplet
      - name: Deploy to Ubuntu Droplet
        env:
          HOST: ${{ secrets.DROPLET_IP }}
          USER: ${{ secrets.DROPLET_USER }}
          PRIVATE_KEY: ${{ secrets.DROPLET_SSH_KEY }}
          SSL_CERTIFICATE: ${{ secrets.SSL_CERTIFICATE }}
          SSL_PRIVATE_KEY: ${{ secrets.SSL_PRIVATE_KEY }}
          DOCR_REGISTRY: ${{ env.DOCR_REGISTRY }}
          DO_REPOSITORY: ${{ env.DO_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          # Create SSL directory and certificate files
          mkdir -p ${{ env.DO_DIRECTORY }}
          echo "$SSL_CERTIFICATE" > ${{ env.DO_DIRECTORY }}/certificate.crt
          echo "$SSL_PRIVATE_KEY" > ${{ env.DO_DIRECTORY }}/private.key

          # Secure the private key file
          chmod 600 ${{ env.DO_DIRECTORY }}/private.key

          # Create a private SSH key file
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH into the Droplet and deploy the Docker container
          ssh -i private_key.pem $USER@$HOST << EOF
            # Log in to DigitalOcean registry
            echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login ${{ env.DOCR_REGISTRY }} -u doctl --password-stdin

            # Pull the latest Docker image
            docker pull $DOCR_REGISTRY/$DO_REPOSITORY:$IMAGE_TAG

            # Stop and remove the current container if it exists
            docker stop tyledecloud || true
            docker rm tyledecloud || true

            # Run the new Docker container with SSL certificates
            docker run -d --name tyledecloud \
              -v /path/to/ssl:/ssl:ro \
              $DOCR_REGISTRY/$DO_REPOSITORY:$IMAGE_TAG
          EOF

          # Clean up sensitive files
          rm private_key.pem
          rm -rf ${{ env.DO_DIRECTORY }}
