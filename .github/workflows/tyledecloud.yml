name: CI/CD Pipeline

on:
  push:
    branches:
      - tyledecloud-server  # Trigger on pushes to the specified branch

env:
  DO_REPOSITORY: cloudy001/tyledecloud  # Your DigitalOcean repository name

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Authenticate with DigitalOcean Container Registry
      - name: Log in to DigitalOcean Container Registry
        id: login-docr
        uses: docker/login-action@v2
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # Step 3: Build and Push Docker Image
      - name: Build and Push Docker Image
        env:
          DOCR_REGISTRY: registry.digitalocean.com
          DO_REPOSITORY: ${{ env.DO_REPOSITORY }}
        run: |
          IMAGE_TAG=latest
          IMAGE_NAME="$DOCR_REGISTRY/$DO_REPOSITORY:$IMAGE_TAG"
          echo "Building and pushing $IMAGE_NAME"

          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # Ensure the build-and-push job completes before deploying

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Log in to DigitalOcean Container Registry
      - name: Log in to DigitalOcean Registry
        run: |
          echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u doctl --password-stdin

      # Step 3: Add Host Key to Known Hosts
      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      # Step 4: Deploy to Ubuntu Droplet
      - name: Deploy to Ubuntu Droplet
        env:
          HOST: ${{ secrets.DROPLET_IP }}  # Droplet's IP address
          USER: ${{ secrets.DROPLET_USER }}  # Droplet's SSH username
          PRIVATE_KEY: ${{ secrets.DROPLET_SSH_KEY }}  # SSH private key
          SSL_CERTIFICATE: ${{ secrets.SSL_CERTIFICATE }}  # SSL certificate
          SSL_PRIVATE_KEY: ${{ secrets.SSL_PRIVATE_KEY }}  # SSL private key
        run: |
          # Create SSL directory and certificate files
          mkdir -p ssl
          echo "$SSL_CERTIFICATE" > ssl/certificate.crt
          echo "$SSL_PRIVATE_KEY" > ssl/private.key

          # Secure the private key file
          chmod 600 ssl/private.key

          # Create a private SSH key file
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem  # Secure the private key

          # SSH into the Droplet and deploy the Docker container
          ssh -i private_key.pem $USER@$HOST << 'EOF'
            # Log in to DigitalOcean Container Registry
            echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u doctl --password-stdin

            # Pull the latest Docker image
            docker pull registry.digitalocean.com/cloudy001/tyledecloud:latest

            # Stop and remove the current container if it exists
            docker stop tyledecloud || true
            docker rm tyledecloud || true

            # Run the new Docker container with SSL certificates
            docker run -d --name tyledecloud \
              -v /path/to/ssl:/ssl:ro \
              registry.digitalocean.com/cloudy001/tyledecloud:latest
          EOF

          # Clean up sensitive files
          rm private_key.pem
          rm -rf ssl
