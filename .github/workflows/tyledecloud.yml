name: CI/CD Pipeline

on:
  push:
    branches:
      - tyledecloud-server  # Trigger on pushes to the specified branch

env:
  DOCR_REGISTRY: registry.digitalocean.com
  DO_REPOSITORY: cloudy001/tyledecloud
  IMAGE_TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Authenticate with DigitalOcean Container Registry
      - name: Log in to DigitalOcean Registry
        id: login-docr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCR_REGISTRY }}
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # Step 3: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="${{ env.DOCR_REGISTRY }}/${{ env.DO_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Building and pushing $IMAGE_NAME"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      # Step 4: Save Docker Registry Metadata
      - name: Save Registry Metadata
        run: echo "${{ env.DOCR_REGISTRY }}/${{ env.DO_REPOSITORY }}" > docker_registry.txt

      # Step 5: Upload Registry Metadata
      - name: Upload Registry Metadata
        uses: actions/upload-artifact@v3
        with:
          name: docker-registry
          path: docker_registry.txt

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      DO_DIRECTORY: ssl
      IMAGE_TAG: latest

    steps:
      # Step 1: Download Docker Registry Metadata
      - name: Download Docker Registry Metadata
        uses: actions/download-artifact@v3
        with:
          name: docker-registry
          path: .

      # Step 2: Read Docker Registry Metadata
      - name: Read Docker Registry Metadata
        run: |
          DOCR_REGISTRY=$(cat docker_registry.txt)
          echo "DOCR_REGISTRY=$DOCR_REGISTRY" >> $GITHUB_ENV

      # Step 3: Authenticate with Docker Registry
      - name: Log in to DigitalOcean Registry
        run: |
          echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login ${{ env.DOCR_REGISTRY }} -u doctl --password-stdin

      # Step 4: Add Host Key to Known Hosts
      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      # Step 5: Deploy to Droplet using SSH Action
      - name: SSH Login and Deploy to Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: ${{ secrets.PORT }}
          envs: DOCR_REGISTRY,DO_REPOSITORY,IMAGE_TAG
          script: |
            echo "Environment Variables:"
            echo "DOCR_REGISTRY: $DOCR_REGISTRY"
            echo "DO_REPOSITORY: $DO_REPOSITORY"
            echo "IMAGE_TAG: $IMAGE_TAG"
            echo "Pulling Docker Image $DOCR_REGISTRY/$DO_REPOSITORY:$IMAGE_TAG"

            # Ensure the directory exists
            mkdir -p /home/ubuntu/deployment  # Create a directory for the deployment
            cd /home/ubuntu/deployment && \
            
            # Log into Docker and pull the image
            echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login $DOCR_REGISTRY -u doctl --password-stdin && \
            docker pull $DOCR_REGISTRY/$DO_REPOSITORY:$IMAGE_TAG && \
            
            # Stop and remove the existing container if it exists
            docker stop tyledecloud || true
            docker rm tyledecloud || true

            # Run the new Docker container with SSL certificates
            docker run -d --name tyledecloud \
              -v /path/to/ssl:/ssl:ro \
              $DOCR_REGISTRY/$DO_REPOSITORY:$IMAGE_TAG

            if [[ $? == 0 ]]; then
              echo "Deployment Successful!!!"
            else
              echo "Error! Unable to deploy the container."
              exit 1
            fi
