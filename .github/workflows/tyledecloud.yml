name: Deploy Node.js App to DigitalOcean

on:
  push:
    branches:
      - tyledecloud-server  # Change to your branch name

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: oauth2
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build, Tag, and Push Image
        env:
          DOCR_REGISTRY: registry.digitalocean.com/cloudy001
          REPOSITORY: tyldecloudserver_app
        run: |
          docker build -t $DOCR_REGISTRY/$REPOSITORY:${GITHUB_RUN_NUMBER} .
          docker push $DOCR_REGISTRY/$REPOSITORY:${GITHUB_RUN_NUMBER}

      - name: Upload DOCR Registry Info
        uses: actions/upload-artifact@v3
        with:
          name: docr-registry
          path: docr_registry.txt

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      REPOSITORY: tyldecloudserver_app
      DIRECTORY: tyledecloud
      COMPOSE: compose.yml

    steps:
      - name: Download DOCR Registry
        uses: actions/download-artifact@v3
        with:
          name: docr-registry
          path: .

      - name: Read DOCR Registry
        run: |
          DOCR_REGISTRY=$(cat docr_registry.txt)
          echo "DOCR_REGISTRY=$DOCR_REGISTRY" >> $GITHUB_ENV

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.DROPLET_SSH_KEY }}" | tr -d '\r' > private_key.pem
          chmod 600 private_key.pem

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "echo 'SSH Connection Successful'"

      - name: Transfer SSL Certificate to DigitalOcean Droplet
        run: |
          echo "${{ secrets.SSL_CERTIFICATE }}" | ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "cat > /etc/ssl/certs/cert.pem"

          echo "${{ secrets.SSL_KEY }}" | ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "cat > /etc/ssl/private/key.pem"

          ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "chmod 600 /etc/ssl/certs/cert.pem && chmod 600 /etc/ssl/private/key.pem"

      - name: Deploy Application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd $DIRECTORY
            echo "Updating Docker Compose file..."
            yq eval '.services.web.image = "${DOCR_REGISTRY}/${REPOSITORY}:${GITHUB_RUN_NUMBER}"' -i $COMPOSE
            echo "Recreating Services..."
            docker compose up --build --force-recreate -d
            echo "Deployment Successful!"
