name: CI/CD Pipeline

on:
  push:
    branches:
      - tyledecloud-server  # Trigger on pushes to the specified branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Authenticate with DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Authenticate with Docker Registry
        run: |
            echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u doctl --password-stdin
  

      - name: Build and Tag Docker Image
        run: |
          docker build -t registry.digitalocean.com/cloudy001/tyledecloud:latest .

      - name: Push Docker Image
        run: |
          docker push registry.digitalocean.com/cloudy001/tyledecloud:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure the build job completes before deploying

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to Ubuntu Droplet
        env:
          HOST: ${{ secrets.DROPLET_IP }}  # Your Droplet's IP address
          USER: ${{ secrets.DROPLET_USER }}  # Your Droplet's SSH username
          PRIVATE_KEY: ${{ secrets.DROPLET_SSH_KEY }}  # Your SSH private key
          SSL_CERTIFICATE: ${{ secrets.SSL_CERTIFICATE }}  # SSL certificate from GitHub Secrets
          SSL_PRIVATE_KEY: ${{ secrets.SSL_PRIVATE_KEY }}  # SSL private key from GitHub Secrets
        run: |
          # Create SSL directory and certificate files
          mkdir -p ssl
          echo "$SSL_CERTIFICATE" > ssl/certificate.crt
          echo "$SSL_PRIVATE_KEY" > ssl/private.key

          # Secure the private key file
          chmod 600 ssl/private.key

          # Create a private SSH key file
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem  # Secure the private key

          # SSH into the Droplet and deploy the Docker container
          ssh -i private_key.pem $USER@$HOST << 'EOF'
            docker pull registry.digitalocean.com/cloudy001/tyledecloud:latest
            docker stop tylendecloud || true
            docker rm tylendecloud || true
            docker run -d --name tylendecloud \
              -v /path/to/ssl:/ssl:ro \
              registry.digitalocean.com/cloudy001/tyledecloud:latest
          EOF

          # Clean up sensitive files
          rm private_key.pem
          rm -rf ssl