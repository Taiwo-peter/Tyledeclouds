name: CI/CD Pipeline for DigitalOcean

on:
  push:
    branches:
      - tyledecloud-server  # Trigger on pushes to the specified branch

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Login to DigitalOcean Container Registry
      uses: docker/login-action@v3
      with:
        registry: registry.digitalocean.com
        username: oauth2
        password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Build, tag, and push app image to DOCR
      id: build-app
      env:
        DOCR_REGISTRY: registry.digitalocean.com/cloudy001
        APP_REPOSITORY: tyldecloudserver_app
      run: |
        docker build -t $DOCR_REGISTRY/$APP_REPOSITORY:${GITHUB_RUN_NUMBER} -f Dockerfile .
        docker push $DOCR_REGISTRY/$APP_REPOSITORY:${GITHUB_RUN_NUMBER}
        echo "$DOCR_REGISTRY" > docr_registry.txt

    - name: Build, tag, and push db image to DOCR
      id: build-db
      env:
        DOCR_REGISTRY: registry.digitalocean.com/cloudy001
        DB_REPOSITORY: tyldecloudserver_db
      run: |
        docker build -t $DOCR_REGISTRY/$DB_REPOSITORY:${GITHUB_RUN_NUMBER} -f Dockerfile.db .
        docker push $DOCR_REGISTRY/$DB_REPOSITORY:${GITHUB_RUN_NUMBER}

    - name: Upload DOCR Registry
      uses: actions/upload-artifact@v4
      with:
        name: docr-registry
        path: docr_registry.txt

  deploy:
    name: Deploy to DigitalOcean Droplet
    runs-on: ubuntu-latest
    needs: build
    env:
      APP_REPOSITORY: tyldecloudserver_app
      DB_REPOSITORY: tyldecloudserver_db
      DIRECTORY: tyledecloud
      COMPOSE: compose.yml

    steps:
    - name: Download DOCR Registry
      uses: actions/download-artifact@v3
      with:
        name: docr-registry
        path: .

    - name: Read DOCR Registry
      run: |
        DOCR_REGISTRY=$(cat docr_registry.txt)
        echo "DOCR_REGISTRY=$DOCR_REGISTRY" >> $GITHUB_ENV

    - name: Setup SSH Key
      run: |
        echo "${{ secrets.DROPLET_SSH_KEY }}" | tr -d '\r' > private_key.pem
        chmod 600 private_key.pem

    - name: Test SSH Connection
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "echo 'SSH Connection Successful'"

    - name: Transfer SSL Certificate to DigitalOcean Droplet
      run: |
        echo "${{ secrets.SSL_CERTIFICATE }}" | ssh -o StrictHostKeyChecking=no -i private_key.pem \
        ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "cat > /etc/ssl/certs/cert.pem"

        echo "${{ secrets.SSL_PRIVATE_KEY }}" | ssh -o StrictHostKeyChecking=no -i private_key.pem \
        ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "cat > /etc/ssl/private/key.pem"

        ssh -o StrictHostKeyChecking=no -i private_key.pem \
        ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "chmod 600 /etc/ssl/certs/cert.pem && chmod 600 /etc/ssl/private/key.pem"

    - name: SSH Login to DigitalOcean Droplet and Deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.PORT }}
        envs: GITHUB_TRIGGERING_ACTOR,GITHUB_RUN_NUMBER,DOCR_REGISTRY,APP_REPOSITORY,DB_REPOSITORY,DIRECTORY,COMPOSE
        script: |
          echo "Environment Variables:"
          echo "GITHUB_TRIGGERING_ACTOR: $GITHUB_TRIGGERING_ACTOR"
          echo "GITHUB_RUN_NUMBER: $GITHUB_RUN_NUMBER"
          echo "DOCR_REGISTRY: $DOCR_REGISTRY"
          echo "APP_REPOSITORY: $APP_REPOSITORY"
          echo "DB_REPOSITORY: $DB_REPOSITORY"
          echo "DIRECTORY: $DIRECTORY"
          echo "COMPOSE: $COMPOSE"
          echo "$GITHUB_TRIGGERING_ACTOR - Deployment Initiated"
  
          # Update docker-compose.yml with the new image versions
          cd $DIRECTORY && \
          yq eval '.services.app.image = "${DOCR_REGISTRY}/${APP_REPOSITORY}:${GITHUB_RUN_NUMBER}"' -i $COMPOSE && \
          yq eval '.services.db.image = "${DOCR_REGISTRY}/${DB_REPOSITORY}:${GITHUB_RUN_NUMBER}"' -i $COMPOSE

          # Deploy the updated services
          docker compose up --build --force-recreate -d

          # Check deployment status
          if [[ $? == 0 ]]; then
            echo "Deployment Successful!!!"
          else
            echo "Error!!!!! Cannot recreate service update"
            exit 1
          fi
