name: CI/CD Pipeline for DigitalOcean

on:
  push:
    branches:
      - tyledecloud-server

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Login to DigitalOcean Container Registry
      uses: docker/login-action@v3
      with:
        registry: registry.digitalocean.com
        username: oauth2
        password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Build, tag, and push app image to DOCR
      id: build-app
      env:
        DOCR_REGISTRY: registry.digitalocean.com/cloudy001
        APP_REPOSITORY: tyldecloudserver_app
      run: |
        docker build -t $DOCR_REGISTRY/$APP_REPOSITORY:${GITHUB_RUN_NUMBER} -f Dockerfile .
        docker push $DOCR_REGISTRY/$APP_REPOSITORY:${GITHUB_RUN_NUMBER}
        echo "$DOCR_REGISTRY" > docr_registry.txt

    - name: Build, tag, and push db image to DOCR
      id: build-db
      env:
        DOCR_REGISTRY: registry.digitalocean.com/cloudy001
        DB_REPOSITORY: tyldecloudserver_db
      run: |
        docker build -t $DOCR_REGISTRY/$DB_REPOSITORY:${GITHUB_RUN_NUMBER} -f Dockerfile.db .
        docker push $DOCR_REGISTRY/$DB_REPOSITORY:${GITHUB_RUN_NUMBER}

    - name: Upload DOCR Registry
      uses: actions/upload-artifact@v4
      with:
        name: docr-registry
        path: docr_registry.txt

  deploy:
    name: Deploy to DigitalOcean Droplet
    runs-on: ubuntu-latest
    needs: build
    env:
      APP_REPOSITORY: tyldecloudserver_app
      DB_REPOSITORY: tyldecloudserver_db
      DIRECTORY: tyledecloud
      COMPOSE: compose.yml
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}

    steps:
    - name: Download DOCR Registry
      uses: actions/download-artifact@v4
      with:
        name: docr-registry
        path: .

    - name: Read DOCR Registry
      run: |
        DOCR_REGISTRY=$(cat docr_registry.txt)
        echo "DOCR_REGISTRY=$DOCR_REGISTRY" >> $GITHUB_ENV

    - name: Setup SSH Key
      run: |
        echo "${{ secrets.DROPLET_SSH_KEY }}" | tr -d '\r' > private_key.pem
        chmod 600 private_key.pem

    - name: Test SSH Connection
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "echo 'SSH Connection Successful'"

    - name: Transfer SSL Certificate to DigitalOcean Droplet
      run: |
        # Create SSL directories
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "sudo mkdir -p /etc/ssl/certs /etc/ssl/private"
        
        # Transfer SSL certificate
        echo "${{ secrets.SSL_CERTIFICATE }}" | ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "sudo tee /etc/ssl/certs/cert.pem >/dev/null"
        
        # Transfer SSL private key
        echo "${{ secrets.SSL_PRIVATE_KEY }}" | ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "sudo tee /etc/ssl/private/key.pem >/dev/null"
        
        # Set permissions
        ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "sudo chmod 600 /etc/ssl/certs/cert.pem /etc/ssl/private/key.pem"
        
        # Verify SSL files
        echo "=== Pre-Deployment SSL Verification ==="
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "sudo ls -l /etc/ssl/certs/cert.pem /etc/ssl/private/key.pem"
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "sudo openssl x509 -in /etc/ssl/certs/cert.pem -noout -text"
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} "sudo openssl rsa -in /etc/ssl/private/key.pem -check -noout"

    - name: SSH Login to DigitalOcean Droplet and Deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.PORT }}
        envs: |
          GITHUB_TRIGGERING_ACTOR,
          GITHUB_RUN_NUMBER,
          DOCR_REGISTRY,
          APP_REPOSITORY,
          DB_REPOSITORY,
          DIRECTORY,
          COMPOSE,
          MYSQL_ROOT_PASSWORD,
          MYSQL_DATABASE,
          MYSQL_USER,
          MYSQL_PASSWORD
        script: |
          # Cleanup
          docker compose down -v --remove-orphans || true
          sudo rm -rf /run/mysqld/*
          
          # Verify SSL files
          echo "=== SSL Certificate Verification ==="
          sudo ls -l /etc/ssl/certs/cert.pem
          sudo ls -l /etc/ssl/private/key.pem
          
          # Deploy
          cd $DIRECTORY
          docker compose up --build --force-recreate -d --wait
          
          # Wait for DB
          echo "=== Waiting for Database ==="
          timeout 120s bash -c 'until docker compose exec db mysqladmin ping -u root -p$MYSQL_ROOT_PASSWORD --silent; do sleep 2; done'
          
          # Final checks
          echo "=== SSL Check in App Container ==="
          docker compose exec app ls -l /etc/ssl/certs/cert.pem /etc/ssl/private/key.pem
          
          echo "=== Database Connection Test ==="
          docker compose exec db mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h db -e "SHOW DATABASES;"